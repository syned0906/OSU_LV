import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error, mean_absolute_percentage_error, r2_score
import sklearn.linear_model as lm
import matplotlib.pyplot as plt

data = pd.read_csv('data_C02_emission.csv')
y = data['CO2 Emissions (g/km)']
X = data[['Engine Size (L)', 'Cylinders', 'Fuel Consumption City (L/100km)', 'Fuel Consumption Hwy (L/100km)', 'Fuel Consumption Comb (L/100km)', 'Fuel Consumption Comb (mpg)']]
X_train , X_test , y_train , y_test = train_test_split(X,y, test_size=0.2)

# for col in X.columns:
#     plt.scatter(x=X_train[col], y=y_train, s=2, c='blue')
#     plt.scatter(x=X_test[col], y=y_test, s=2, c='red')
#     plt.ylabel('CO2 Emissions (g/km)')
#     plt.xlabel(col)
#     plt.legend(['Train', 'Test'])
#     plt.show()

sc = MinMaxScaler()
X_train_n = pd.DataFrame(sc.fit_transform(X_train), columns=X_train.columns)
X_test_n = pd.DataFrame(sc.transform(X_test), columns=X_test.columns)





# for col in X_train.columns:
#     plt.subplot(2,1,1)
#     plt.hist(X_train[col])
#     plt.title('Before scaling', fontsize=10)
#     plt.subplot(2,1,2)
#     plt.hist(X_train_n[col])
#     plt.title('After scaling', fontsize=10)
#     plt.xlabel(col)
#     plt.show()

linearModel = lm.LinearRegression()
linearModel.fit(X_train_n, y_train)
print(linearModel.coef_)

y_test_p = linearModel.predict(X_test_n)
plt.scatter(x=X_test_n['Fuel Consumption City (L/100km)'], y=y_test, s=2, c='blue')
plt.scatter(x=X_test_n['Fuel Consumption City (L/100km)'], y=y_test_p, s=2, c='red')
plt.show()

print(f'Mean squared error: {mean_squared_error(y_test, y_test_p)}')
print('Root mean squared error')
print(f'Mean absolute error: {mean_absolute_error(y_test, y_test_p)}')
print(f'Mean absolute percentage error: {mean_absolute_percentage_error(y_test, y_test_p)}')
print(f'R2 score: {r2_score(y_test, y_test_p)}')
